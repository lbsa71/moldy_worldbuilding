<!-- src/components/Game.astro -->
---
---
<div class="game-container">
    <canvas id="gameCanvas"></canvas>
    <div id="statsOverlay">
        <div>Renderer: <span id="rendererType">Loading...</span></div>
        <div>FPS: <span id="fpsCounter">0</span></div>
    </div>
</div>

<script>
    import { Compiler } from "../inkjs/compiler/Compiler";
    import { Story } from "../inkjs/ink";
    import inkFile from '../ink/demo.ink?raw';

    const inkFileContents = inkFile;
    const compiler = new Compiler(inkFileContents);
    const compiledStory = compiler.Compile();
    let story = compiledStory;
    // WASM types
    interface WasmExports {
        calculatePhysics: (x: number, y: number, z: number) => number;
        memory: WebAssembly.Memory;
    }

    // Simple WASM loader
    async function loadWasm() {
        try {
            console.log('loading wasm');

            const response = await fetch('/wasm/release.wasm');
            const bytes = await response.arrayBuffer();
            
            // Create memory for WASM
            const memory = new WebAssembly.Memory({ initial: 1 });
            
            // Create import object
            const importObject = {
                env: {
                    memory,
                    abort: (_msg: number, _file: number, line: number, column: number) => {
                        console.error(`Abort at ${line}:${column}`);
                    }
                }
            };
            
            // Instantiate WASM module
            const { instance } = await WebAssembly.instantiate(bytes, importObject);
            const exports = instance.exports as unknown as WasmExports;
            
            // Assign the function to window
            window.calculatePhysics = (x: number, y: number, z: number) => exports.calculatePhysics(x, y, z);
            
            console.log('WASM loaded successfully');
            return true;
        } catch (error) {
            console.error('Failed to load WASM:', error);
            return false;
        }
    }

    // Import and initialize game
    const initGame = async () => {
        try {
            console.log('initGame');
            const { GameScene } = await import('./GameScene');
            console.log('after import of initGame');
            // Load WASM first
            await loadWasm();
            
            const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
            if (canvas) {
                console.log("init GameScene");
                const game = new GameScene(canvas);
                game.setStory(story);
                console.log("GameScene initialized");

                await game.run();
                
                // Update renderer type
                const rendererType = document.getElementById('rendererType');
                if (rendererType) {
                    rendererType.textContent = game.getRendererType();
                }

                // Update FPS counter
                const fpsCounter = document.getElementById('fpsCounter');
                if (fpsCounter) {
                    setInterval(() => {
                        fpsCounter.textContent = game.getFps().toFixed(0);
                    }, 1000);
                }
            }
        } catch (error) {
            console.error('Failed to initialize game:', error);
        }
    };

    // Wait for window load before initializing
    window.addEventListener('load', initGame);
</script>

<style>
    .game-container {
        width: 100%;
        height: 100vh;
        position: relative;
    }
    
    #gameCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
    }

    #statsOverlay {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-family: monospace;
        font-size: 14px;
        pointer-events: none;
    }
</style>
